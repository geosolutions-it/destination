/*
 *  Copyright (C) 2007-2012 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geobatch.destination.vulnerability;

import static it.geosolutions.geobatch.destination.vulnerability.VulnerabilityComputationOld.PARTNER_FIELD;
import it.geosolutions.geobatch.destination.common.InputObject;
import it.geosolutions.geobatch.destination.common.OutputObject;
import it.geosolutions.geobatch.destination.ingestion.MetadataIngestionHandler;
import it.geosolutions.geobatch.destination.vulnerability.TargetManager.TargetInfo;
import it.geosolutions.geobatch.flow.event.ProgressListenerForwarder;

import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.geotools.data.DefaultTransaction;
import org.geotools.data.FeatureSource;
import org.geotools.data.Transaction;
import org.geotools.feature.FeatureIterator;
import org.geotools.jdbc.JDBCDataStore;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;
import org.opengis.filter.Filter;
import org.opengis.referencing.crs.CoordinateReferenceSystem;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vividsolutions.jts.geom.Geometry;
/**
 * This class is the entry point for the vulnerability process (method computeVulnerability) and it implements the computation's main loop 
 * 
 * @author DamianoG
 * @author Daniele Romagnoli, GeoSolutions SAS
 */
public class VulnerabilityComputationOld extends InputObject {

    private final static Logger LOGGER = LoggerFactory.getLogger(VulnerabilityComputationOld.class);

    private static Pattern TYPE_NAME_PARTS = Pattern
                        .compile("^([A-Z]{2})_([A-Z]{1})_([A-Za-z]+)_([0-9]{8})$");
    
    public static String GEO_TYPE_NAME = "siig_geo_ln_arco_X";
    
    public static String VULNERABILITY_TYPE_NAME = "siig_t_vulnerabilita_X";
    private static String DISTANCE_TYPE_NAME = "siig_d_distanza";
    private static String ID_GEO_ARCO = "id_geo_arco";
    public static String PARTNER_FIELD = "fk_partner";
    public static String GEOID = "id_geo_arco";
    
    public final static String RASTER_PATH_PROP = "SIIG_RASTERS_PATH";
    
    private Long startOriginId; 
    private Long endOriginId;
    private Long totPages; 
    private Long pageNumber;
    
    private int pixelArea;
    
    private Map vulnerabilityCfg;
    
    
    String codicePartner;
    int partner;
    
    
    /**
     * @param startOriginId the startOriginId to set
     */
    public void setStartOriginId(Long startOriginId) {
        this.startOriginId = startOriginId;
    }

    /**
     * @param endOriginId the endOriginId to set
     */
    public void setEndOriginId(Long endOriginId) {
        this.endOriginId = endOriginId;
    }

    /**
     * @param pixelArea the pixelArea to set
     */
    public void setPixelArea(int pixelArea) {
        this.pixelArea = pixelArea;
    }

    /**
     * @param totPages the totPages to set
     */
    public void setTotPages(Long totPages) {
        this.totPages = totPages;
    }

    /**
     * @param pageNumber the pageNumber to set
     */
    public void setPageNumber(Long pageNumber) {
        this.pageNumber = pageNumber;
    }

    /**
     * @param inputTypeName
     * @param listenerForwarder
     */
    public VulnerabilityComputationOld(String inputTypeName,
            ProgressListenerForwarder listenerForwarder,
                        MetadataIngestionHandler metadataHandler, JDBCDataStore dataStore) {
        super(inputTypeName, listenerForwarder, metadataHandler, dataStore);
        // default area
        pixelArea = 100;
    }

    @Override
    protected boolean parseTypeName(String typeName) {
        Matcher m = TYPE_NAME_PARTS.matcher(typeName);
        if(m.matches()) {
                        // partner alphanumerical abbreviation (from siig_t_partner)
                        codicePartner = m.group(1);
                        // partner numerical id (from siig_t_partner)
                        partner = Integer.parseInt(partners.get(codicePartner).toString());                        
                        
                        return true;
                }
        return false;
    }

    private String getTypeName(String typeName, int aggregationLevel) {
        return typeName.replace("X", aggregationLevel + "");
    }

    /**
     * Compute the vulnerability for each arc. The Algorithm is:
     * 
     * ForEach(arc)
     *    buffers = computeBuffers(allDistance, arc);
     *    ForEach(distance)
     *          ForEach(target)
     *                  if(!isAccepted(distance,target))
     *                      saveOnDB(0,arc,target,distance)
     *                      continue;
     *                  sum = computeSum(buffer, target);
     *                  saveOnDB(sum,arc,target,distance);
     * 
     * 
     * @param datastoreParams
     * @param crs
     * @param aggregationLevel
     * @throws IOException
     */
    public void computeVulnerability(CoordinateReferenceSystem crs, int aggregationLevel, String writeMode, String closePhase) throws IOException {

        reset();
        if (isValid()) {
            

            crs = checkCrs(crs);

            String outFeatureName = getTypeName(VULNERABILITY_TYPE_NAME, aggregationLevel);

            int process = -1;
            int trace = -1;
            int errors = 0;
            long otherErrors = 0;

            // existing process
                         MetadataIngestionHandler.Process importData = getProcessData();
                         process = importData.getId();
                         trace = importData.getMaxTrace();
                         errors = importData.getMaxError();
                         int startErrors = errors;
                         
                         if(process == -1) {
                                LOGGER.error("Cannot find process for input file");
                                throw new IOException("Cannot find process for input file");
                        }
                         
            

            //
            // Load All needed resources: properties files, Rendered Images, GeotifReaders 
            //
            //final TargetPropertiesLoader propertiesLoader = new TargetPropertiesLoader();
            vulnerabilityCfg = (Map) readResourceFromXML("/vulnerability.xml");
            String basePath = System.getProperty(RASTER_PATH_PROP, "");
            if(!basePath.equals("")) {
                    basePath = basePath + File.separator + codicePartner;
            }
            VulnerabilityStatsEngine vse = new VulnerabilityStatsEngine(basePath, vulnerabilityCfg, dataStore, DISTANCE_TYPE_NAME, pixelArea);
            /*Properties targetMapping = propertiesLoader.getTargetMapping();
            Map<Integer, String> valuesZone = propertiesLoader.getTargetValuesZone();*/
            ResultStatsMap statsMap = new ResultStatsMap(vulnerabilityCfg);

            //Setup the OutputObject (in thet case the vulnerability table) remove old values for the partner and detect the max id
            Transaction transaction = new DefaultTransaction();
            OutputObject vulnerabilityObj = new OutputObject(dataStore, transaction,
                    outFeatureName, GEOID);

            //
            // Load the concrete operation (Insert or PurgeInsert or Update)
            //
            VulnerabilityOperation concreteOperation = VulnerabilityOperation.instantiateWriterFromString(writeMode);
            LOGGER.info("Using writer " + VulnerabilityOperation.class);
            concreteOperation.initFeature(vulnerabilityObj, partner);
            // Setup filtering
            concreteOperation.setStartOriginId(startOriginId);
            concreteOperation.setEndOriginId(endOriginId);
            concreteOperation.setPageNumber(pageNumber);
            concreteOperation.setTotPages(totPages);
            
            //
            // Start the vulnerability Computation
            //
            long start = System.nanoTime();
            try {
                SimpleFeature inputFeature = null;
                int loopCounter = 0;
                List<Double> allDistances = vse.getDistances();
                final int reportingLoopStep = allDistances.size() > 10 ? 50 : 100;
                
             // setup geo input / output object
                                String geoName = getTypeName(GEO_TYPE_NAME, aggregationLevel);
                                if(aggregationLevel == 3){
                                        geoName = geoName.replace("ln", "pl");
                }
                createInputReader(dataStore, null, geoName);
                
                            Filter partnerFilter = 
                                            filterFactory.equals(filterFactory.property(PARTNER_FIELD),
                                filterFactory.literal(partner));
                            setInputFilter(partnerFilter);
                            
                            int total = getImportCount();
                            
                            setInputFilter(concreteOperation.buildOriginFilter(partner, total,null));
                // calculates total objects to import
                
                LOGGER.info("import count: " + total);
                Map<String, TargetInfo> targetInfo = vse.getTargetInfo();
                
                LOGGER.info("Start computation: ThreadName: " + Thread.currentThread().getName() + " - startOriginId: " + startOriginId + " - endOriginId: " + endOriginId);
                String targetID = null;
                String idArco = null; 
                Double currentDistance = null;
                
                while ((inputFeature = readInput()) != null) {

                    //retrieve the arcs that must be used for the buffer calculation
                    // TODO move this code outside this class, no if between aggregation level must be there
                    //          ISSUE: method createInputReader is declared protected in the superclass
                    try{
                        List<SimpleFeature> arcList = new ArrayList<SimpleFeature>();
                        if(aggregationLevel != 3){
                            // for levels 1 and 2 the inputfeature is already the arc to compute the buffer
                            arcList.add(inputFeature);
                        }
                        else{
                            // otherwise, for level 3, get all the arcs that intersect with the current grid cell
                            FeatureIterator<SimpleFeature> iterator = null;
                            try{
                                Geometry cell = (Geometry) inputFeature.getDefaultGeometry();
                                String linearGeoName = geoName.replace("pl", "ln");
                                                                FeatureSource<SimpleFeatureType, SimpleFeature> reader = createInputReader(
                                                                                dataStore, null,
                                                                                linearGeoName);
//                                    reader = createInputReader(dataStore, null, "siig_geo_ln_arco_2");
                                iterator = reader.getFeatures(filterFactory.and(
                                        filterFactory.intersects(filterFactory.property(getInputGeometryName(dataStore, linearGeoName)),
                                                filterFactory.literal(cell)),
                                                partnerFilter
                                                )).features();
                                while(iterator.hasNext()){
                                    SimpleFeature sf = (SimpleFeature)iterator.next();
                                    arcList.add(sf);
                                }
                            } catch(Exception e) {
                                    LOGGER.error("Error reading " + geoName, e);
                                    errors++;
                                    metadataHandler
                                                            .logError(trace, errors, "Error reading " + geoName, getError(e), 0);
                            } finally{
                                if(iterator != null){
                                    iterator.close();
                                }
                            }
                        }
                        idArco = ((BigDecimal) inputFeature.getAttribute(ID_GEO_ARCO)).toString();
                        if(arcList.size() > 0) {
                                
                                // if (!idArco.equalsIgnoreCase("13150")) {
                                // continue;
                                // }
                                // /// computeBuffersOnArcs                        
                                MultipleBufferMap mbm = vse.computeBuffersOnArcs(arcList, allDistances);
                                
                                // ////
        
                                String id = null;
                                
                                for (Double processedDistance : allDistances) {
                                    currentDistance = processedDistance;
                                    Iterator rasterIter = targetInfo.keySet().iterator();
                                    while (rasterIter.hasNext()) {
        
                                        // save the ID of this target
                                        targetID = (String) rasterIter.next();
                                        // REMOVE THAT: DEBUGGING THE CROP ISSUE
                                        // if (!targetID.contains("commerciali")) {
                                        // continue;
                                        // }
        
                                        // Load the target manager, init its status and check if the actual distance is a valid distance for it
                                        TargetInfo info = targetInfo.get(targetID);
                                        TargetManager targetManager = info.getManager();
                                        
                                        if (!targetManager.isDistanceRelatedToTarget(processedDistance)) {
                                            continue;
                                        }
                                        
                                        // REMOVE THAT: DEBUGGING THE CROP ISSUE
                                        // if (currentDistance.compareTo(8.0d) != 0) {
                                        // continue;
                                        // }
                                        // Use the cell for crop the raster if the aggregation level == 3, use the buffer otherwise
                                        Geometry cropArea = (Geometry) (aggregationLevel == 3 ? inputFeature
                                                .getDefaultGeometry() : mbm.getBuffersForDistance(
                                                processedDistance).get(0));
                                        
                                        
        
                                        // retrieve the fid for this record
                                        id = buildFid(idArco, processedDistance);
        
                                        ///////// crop images
                                        // Retrieve the buffer of the arc in the raster space and crop the raster of the target in the raster of the buffer BBOX to run the stats on a smaller raster
                                        Geometry rasterSpaceGeometry = vse.getRasterGeometry(targetID, cropArea);
                                        RenderedImage croppedImage = null;
                                        try {
                                                croppedImage = vse.cropImage(targetID, rasterSpaceGeometry);
                                        } catch(Exception e) {
                                                
                                        }
                                        ////////
        
                                        ///////// Validate crop images
                                        // Check if the crop operation was succesful
                                        boolean forceToZero = false;
                                        if(croppedImage == null){
                                            if(LOGGER.isDebugEnabled()){
                                                LOGGER.debug("arc: " + inputFeature.getID() + " - target: " + targetID + " set to 0 (bboxes doesn't intersect between them)");
                                            }
                                            forceToZero = true;
                                            continue;
                                        }
                                        /////////////
                                        
                                        ///////// computeStats
                                        // Compute the stats on the target 
                                        try {
                                                if(aggregationLevel != 3){
                                                    vse.computeStatsOld(rasterSpaceGeometry, croppedImage, statsMap, forceToZero, info);
                                                } else {
                                                    vse.computeStatsOld(mbm.getBuffersForDistance(processedDistance), croppedImage, statsMap, forceToZero, info);
                                                }
                                        } catch(Exception e) {
                                                errors++;
                                                metadataHandler
                                                                        .logError(trace, errors, "Error computing ZonalStats on " + geoName, getError(e), 0);
                                                LOGGER.error("Error computing ZonalStats on " + geoName, e);
                                        }
                                        
                                        
                                    }
                                    try {
                                            concreteOperation.writeOutputObjects(trace, vulnerabilityObj, total, outFeatureName, inputFeature, id, statsMap.getStatsMap(), partner);
                                    } catch(Exception e) {
                                        errors++;
                                        metadataHandler
                                                                .logError(trace, errors, "Error writing objects on " + geoName, getError(e), 0);
                                        LOGGER.error("Error writing objects on " + geoName, e);
                                }
                                    if(!statsMap.isEmpty()) {
                                            statsMap.clear();
                                    }
                                    
                                }
                                
                                
                                
                            }
                    }
                    catch(Exception e){
                            errors++;
                            metadataHandler
                                                    .logError(trace, errors, "Error occurred on raster: " + targetID +" for distance " + currentDistance + " on arc:" + idArco, getError(e), 0);                        
                        LOGGER.error("Error occurred on raster: " + targetID +" for distance " + currentDistance + " on arc:" + idArco +  "\n" + e.getMessage(), e);
                    }

                    loopCounter++;

                    //int id = nextId(startId);
                    if(loopCounter % reportingLoopStep == 0){
                        LOGGER.info("computed arcs FROM -" + (loopCounter-100) + "- TO -" + loopCounter + "-");
                    }
                    if(LOGGER.isDebugEnabled() && inputFeature != null){
                        LOGGER.debug("Computing arc " + inputFeature.getID());
                    }
                }
                importFinished(total, errors - startErrors, "Data imported in " + outFeatureName);

            } finally {
                closeInputReader();
                LOGGER.info("Write errors: " + errors + " - other errors: " + otherErrors);
                
                if (process != -1 && closePhase != null) {
                                        // close current process phase
                                        metadataHandler.closeProcessPhase(process, closePhase);
                                }
                transaction.close();
            }
            
            long end = System.nanoTime() - start;

            double time = end * (10E-9) / 60;

            System.out
                    .println("Old version of the vulnerability computation for the aggregation level "
                            + aggregationLevel + " takes " + time + " minutes");
            
        }
    }

    private static String buildFid(String idArco, Double el){
        return idArco + "." +el.intValue();
    }
}
