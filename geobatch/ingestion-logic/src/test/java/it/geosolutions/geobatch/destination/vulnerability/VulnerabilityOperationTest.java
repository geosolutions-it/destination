/*
 *  Copyright (C) 2007-2012 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geobatch.destination.vulnerability;

import it.geosolutions.geobatch.destination.common.OutputObject;
import it.geosolutions.geobatch.destination.common.utils.FeatureLoaderUtils;
import it.geosolutions.geobatch.destination.commons.DestinationOnlineTestCase;
import it.geosolutions.geobatch.destination.ingestion.MetadataIngestionHandler;
import it.geosolutions.geobatch.destination.vulnerability.VulnerabilityOperation.OperationType;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.geotools.data.DataUtilities;
import org.geotools.data.FeatureStore;
import org.geotools.data.Query;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.geotools.feature.simple.SimpleFeatureTypeBuilder;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author DamianoG
 *
 */
public class VulnerabilityOperationTest extends DestinationOnlineTestCase {
    
    private final static Logger LOGGER = LoggerFactory.getLogger(VulnerabilityOperationTest.class);
    
    @Before
    public void before() throws Exception{
        setOriginTable(VulnerabilityComputation.VULNERABILITY_TYPE_NAME.replace("X", 1 + ""));
        super.before();
    }
    
    /**
     * Tests the creation methods for each Vulnerability Operation
     */
    @Ignore
    @Test
    public void testOpCreation(){
        
        VulnerabilityOperation opInsert = VulnerabilityOperation.instantiateWriter(OperationType.INSERT);
        VulnerabilityOperation opInsert2 = VulnerabilityOperation.instantiateWriterFromString("INSERT");
        if(!(opInsert instanceof VulnerabilityOperation.InsertOperation && opInsert2 instanceof VulnerabilityOperation.InsertOperation)){
            Assert.fail("test fails while try to instantiate 'VulnerabilityOperation.InsertOperation'");
        }
        VulnerabilityOperation opPurgeInsert = VulnerabilityOperation.instantiateWriter(OperationType.PURGE_INSERT);
        VulnerabilityOperation opPurgeInsert2 = VulnerabilityOperation.instantiateWriterFromString("PURGE_INSERT");
        if(!(opPurgeInsert instanceof VulnerabilityOperation.PurgeInsertOperation && opPurgeInsert2 instanceof VulnerabilityOperation.PurgeInsertOperation)){
            Assert.fail("test fails while try to instantiate 'VulnerabilityOperation.PurgeInsertOperation'");
        }
        VulnerabilityOperation opUpdate = VulnerabilityOperation.instantiateWriter(OperationType.UPDATE);
        VulnerabilityOperation opUpdate2 = VulnerabilityOperation.instantiateWriterFromString("UPDATE");
        if(!(opUpdate instanceof VulnerabilityOperation.UpdateOperation && opUpdate2 instanceof VulnerabilityOperation.UpdateOperation)){
            Assert.fail("test fails while try to instantiate 'VulnerabilityOperation.UpdateOperation'");
        }
    }

    /**
     * Tests The insert operation
     * @throws IOException
     */
    @Ignore
    @Test
    public void testOperationInsert() throws IOException{
        VulnerabilityOperation opInsert = VulnerabilityOperation.instantiateWriter(OperationType.INSERT);
        opInsert.initFeature(vulnerabilityObj, 1);
    }

    /**
     * Tests The purge-insert operation
     * @throws IOException
     */
    @Ignore
    @Test
    public void testOperationPurgeInsert() throws IOException{
        VulnerabilityOperation opInsert = VulnerabilityOperation.instantiateWriter(OperationType.PURGE_INSERT);
        opInsert.setTotPages(2l);
        opInsert.setPageNumber(1l);
        opInsert.buildOriginFilter(1, 8, null,null);
        opInsert.initFeature(vulnerabilityObj, 1);
        FeatureStore<SimpleFeatureType, SimpleFeature> inputReader = FeatureLoaderUtils.createFeatureSource(dataStore, outTransaction,testTable);
        int featuresNumber = inputReader.getCount(Query.ALL);
        // Expect 3 features: just for partner 1 and just with id from 1 to 5
        Assert.assertEquals(featuresNumber, 3);
    }
    
    @Override
    protected void loadFeature(OutputObject objOut) throws IOException{
        List<SimpleFeature> list = new ArrayList<SimpleFeature>();
        list.add(DataUtilities.createFeature(objOut.getSchema(), "fid1=1|1|8|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1"));
        list.add(DataUtilities.createFeature(objOut.getSchema(), "fid2=2|2|8|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1"));
        list.add(DataUtilities.createFeature(objOut.getSchema(), "fid3=3|3|8|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1"));
        list.add(DataUtilities.createFeature(objOut.getSchema(), "fid4=4|4|8|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1"));
        list.add(DataUtilities.createFeature(objOut.getSchema(), "fid5=5|5|8|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1"));
        list.add(DataUtilities.createFeature(objOut.getSchema(), "fid6=6|6|8|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1"));
        list.add(DataUtilities.createFeature(objOut.getSchema(), "fid7=7|7|8|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1"));
        list.add(DataUtilities.createFeature(objOut.getSchema(), "fid8=8|8|8|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1"));
        list.add(DataUtilities.createFeature(objOut.getSchema(), "fid8=9|9|8|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|2"));
        SimpleFeatureCollection sfc = DataUtilities.collection(list);
        objOut.getWriter().addFeatures(sfc);
    }
    
    @Override
    protected String getFixtureId() {
        return "destination";
    }
    
    @Override
    protected Properties createExampleFixture() {
        Properties ret = new Properties();
        for (Map.Entry entry : getExamplePostgisProps().entrySet()) {
            ret.setProperty(entry.getKey().toString(), entry.getValue().toString());
        }
        return ret;
    }

    
}
