/*
 *  Copyright (C) 2007-2012 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package it.geosolutions.geobatch.destination.vulnerability;

import it.geosolutions.geobatch.destination.common.InputObject;
import it.geosolutions.geobatch.destination.common.OutputObject;
import it.geosolutions.geobatch.destination.ingestion.MetadataIngestionHandler;

import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.geotools.data.DataStore;
import org.geotools.data.DataStoreFinder;
import org.geotools.data.DataUtilities;
import org.geotools.data.DefaultTransaction;
import org.geotools.data.FeatureSource;
import org.geotools.data.Transaction;
import org.geotools.feature.FeatureIterator;
import org.geotools.feature.simple.SimpleFeatureBuilder;
import org.geotools.feature.simple.SimpleFeatureTypeBuilder;
import org.geotools.gce.geotiff.GeoTiffReader;
import org.geotools.jdbc.JDBCDataStore;
import org.geotools.referencing.CRS;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;
import org.opengis.referencing.FactoryException;
import org.opengis.referencing.NoSuchAuthorityCodeException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.MultiLineString;

/**
 * @author DamianoG
 * 
 * This class has the only purpose to check how complex is the process for level 3
 * MultipleBuffer process could be much computational expensive for complex geometries
 */
public class VulnerabilityLevel3Tests extends InputObject {

    private final static Logger LOGGER = LoggerFactory.getLogger(VulnerabilityLevel3Tests.class);
    
    public VulnerabilityLevel3Tests(String inputTypeName,
			MetadataIngestionHandler metadataHandler, JDBCDataStore dataStore) {
        super(inputTypeName, null, metadataHandler, dataStore);
    }

    @Override
    protected boolean parseTypeName(String typeName) {
        return false;
    }  

    public void runAnImplementation(Map<String, Serializable> datastoreParams) throws IOException, NoSuchAuthorityCodeException, FactoryException{       
        aggregateArcsOnGridAndComupteBuffers3();
    }
    
    /**
     * First Attemp: Max Accuracy: 
     * forEach Cell
     *  1) get the arcs that intersect that cell
     *  2) get the union of that arcs
     *  3) intersect the union with the cell
     *  4) compute vulnerability with that ROI 
     *  
     *  Issues : the buffer calculation of the union of the arcs generate lots of errors when the CGA Alghoritm is performed
     *                  see JTS's CGAlgorithms class, method isCCW(), line 167 
     * 
     * @param dataStore
     * @throws IOException
     * @throws NoSuchAuthorityCodeException
     * @throws FactoryException
     */
    private void aggregateArcsOnGridAndComupteBuffers(JDBCDataStore dataStore) throws IOException, NoSuchAuthorityCodeException, FactoryException {
        
        Map<Double, SimpleFeatureType> featTypeMap = null;
        Map<Double, OutputObject> outMap = null;
        Map<Double, Transaction> transactionMap = null;
        try {
            
            String inputGeometryName = getInputGeometryName(dataStore);
            SimpleFeature gridFeature = null;
            createInputReader(dataStore, new DefaultTransaction(), "siig_geo_grid");
            
            
            List<Double> distances = new ArrayList<Double>();
            distances.add(8d);distances.add(25d);distances.add(250d);distances.add(780d);
            
            featTypeMap = new HashMap<Double, SimpleFeatureType>();
            outMap = new HashMap<Double, OutputObject>();
            transactionMap = new HashMap<Double, Transaction>();
            for(Double el : distances){
                featTypeMap.put(el, buildTableMultiPolygon(dataStore, el));
                transactionMap.put(el, new DefaultTransaction());
                outMap.put(el, new OutputObject(dataStore, transactionMap.get(el), "testVunLevel3-" + el, null));
            }
            
            int c = 0;
            Transaction arcoTrans = null;
            
            while ((gridFeature = readInput()) != null) {
                FeatureIterator<SimpleFeature> iterator = null;
                try {
                    Geometry cell = (Geometry) gridFeature.getDefaultGeometry();
                    arcoTrans = new DefaultTransaction();
                    FeatureSource<SimpleFeatureType, SimpleFeature> reader = createInputReader(
                            dataStore, arcoTrans, "siig_geo_ln_arco_1");
                    iterator = reader.getFeatures(
                            filterFactory.intersects(filterFactory.property(inputGeometryName),
                                    filterFactory.literal(cell))).features();
                    
                    Geometry unionCell = null;
                    while(iterator.hasNext()){
                        SimpleFeature sf = (SimpleFeature)iterator.next();
                        Geometry arcGeom = (Geometry)sf.getDefaultGeometry();
                        Geometry intersection = arcGeom.intersection(cell);
                        unionCell = (unionCell == null)? intersection : unionCell.union(intersection);
                    }
                    if(unionCell == null){
                        continue;
                    }
                    DistancesPair allDistancesForComputation =  TargetPropertiesLoader.createPairDistance(distances);
                    SimpleFeatureBuilder sfb = new SimpleFeatureBuilder(featTypeMap.get(8d));
                    sfb.add(unionCell);
                    SimpleFeature sf = sfb.buildFeature(c+"");
                    
                    Map<Double, Geometry> buffers = VulnerabilityUtils.computeBuffers(sf, allDistancesForComputation);
                    
                    for(Double el : buffers.keySet()){
                        if(el == null){
                            continue;
                        }
                        Transaction tmp = transactionMap.get(el);
                        OutputObject outObj = outMap.get(el);
                        SimpleFeatureBuilder sfb2 = new SimpleFeatureBuilder(featTypeMap.get(el));
                        Geometry geom = buffers.get(el);
                        if(geom != null){
                            sfb2.add(geom);
                            SimpleFeature sff = sfb2.buildFeature(c+"");
                            outObj.getWriter().addFeatures(DataUtilities.collection(sff));
                            tmp.commit();
                            c++;
                            LOGGER.info("--> " + c);
                        }
                    }
                }
                catch(Exception e){
                    LOGGER.error(e.getLocalizedMessage());
                }
                finally {
                    if(arcoTrans != null){
                        arcoTrans.close();
                    }
                    if(iterator != null){
                        iterator.close();
                    }
                }
            }
        }
        finally {
            for(Double el : transactionMap.keySet()){
                Transaction t = transactionMap.get(el);
                if(t != null){
                    try{
                        t.close();
                    }
                    catch(Exception e){
                        LOGGER.error("some problems has occurred...");
                    }
                }
            }
            closeInputReader();
        }
    }
    
    /**
     * Second Attemp: Mid Accuracy: 
     * forEach Cell
     *  1) get the arcs that intersect that cell
     *          forEach arc
     *                  1) Compute buffer          
     *  3) compute the union of the buffered arc
     *  4) compute vulnerability with that ROI 
     *  
     *  Issues: The union of the buffer is very slow
     *  
     * @param dataStore
     * @throws IOException
     * @throws NoSuchAuthorityCodeException
     * @throws FactoryException
     */
    private void aggregateArcsOnGridAndComupteBuffers2(JDBCDataStore dataStore) throws IOException, NoSuchAuthorityCodeException, FactoryException {
        
        Map<Double, SimpleFeatureType> featTypeMap = null;
        Map<Double, OutputObject> outMap = null;
        Map<Double, Transaction> transactionMap = null;
        try {
            
            String inputGeometryName = getInputGeometryName(dataStore);
            SimpleFeature gridFeature = null;
            createInputReader(dataStore, new DefaultTransaction(), "siig_geo_grid");
            
            
            List<Double> distances = new ArrayList<Double>();
            distances.add(8d);distances.add(25d);distances.add(250d);distances.add(780d);
            
            featTypeMap = new HashMap<Double, SimpleFeatureType>();
            outMap = new HashMap<Double, OutputObject>();
            transactionMap = new HashMap<Double, Transaction>();
            for(Double el : distances){
                featTypeMap.put(el, buildTableMultilinestring(dataStore, el));
                transactionMap.put(el, new DefaultTransaction());
                outMap.put(el, new OutputObject(dataStore, transactionMap.get(el), "testVunLevel3-" + el, null));
            }
            
            int c = 0;
            Transaction arcoTrans = null;
            DistancesPair allDistancesForComputation =  TargetPropertiesLoader.createPairDistance(distances);
            int errors = 0;
            while ((gridFeature = readInput()) != null) {
                FeatureIterator<SimpleFeature> iterator = null;
                try {
                    Geometry cell = (Geometry) gridFeature.getDefaultGeometry();
                    arcoTrans = new DefaultTransaction();
                    FeatureSource<SimpleFeatureType, SimpleFeature> reader = createInputReader(
                            dataStore, arcoTrans, "siig_geo_ln_arco_1");
                    iterator = reader.getFeatures(
                            filterFactory.intersects(filterFactory.property(inputGeometryName),
                                    filterFactory.literal(cell))).features();
                    
                    Geometry unionCell = null;
                    Map<Double, Geometry> unionBuffers = new HashMap<Double, Geometry>();
                    while(iterator.hasNext()){
                        SimpleFeature sf = (SimpleFeature)iterator.next();
                        Geometry arcGeom = (Geometry)sf.getDefaultGeometry();
//                        Geometry intersection = arcGeom.intersection(cell);
                        
                        SimpleFeatureBuilder sfb = new SimpleFeatureBuilder(featTypeMap.get(8d));
                        sfb.add(arcGeom);
                        SimpleFeature arcSF = sfb.buildFeature(c+"");
                        Map<Double, Geometry> buffers = VulnerabilityUtils.computeBuffers(arcSF, allDistancesForComputation);
                        mergeBufferMap(buffers, unionBuffers);
                    }
                    if(unionBuffers == null){
                        continue;
                    }
                    
                    
                    for(Double el : unionBuffers.keySet()){
                        if(el == null){
                            continue;
                        }
                        Transaction tmp = transactionMap.get(el);
                        OutputObject outObj = outMap.get(el);
                        SimpleFeatureBuilder sfb2 = new SimpleFeatureBuilder(featTypeMap.get(el));
                        Geometry geom = unionBuffers.get(el);
                        if(geom != null){
                            sfb2.add(geom);
                            SimpleFeature sff = sfb2.buildFeature(c+"");
                            outObj.getWriter().addFeatures(DataUtilities.collection(sff));
                            tmp.commit();
                            c++;
                            LOGGER.info("--> " + c);
                        }
                    }
                }
                catch(Exception e){
                    LOGGER.error(e.getLocalizedMessage());
                }
                finally {
                    if(arcoTrans != null){
                        arcoTrans.close();
                    }
                    if(iterator != null){
                        iterator.close();
                    }
                }
            }
        }
        finally {
            for(Double el : transactionMap.keySet()){
                Transaction t = transactionMap.get(el);
                if(t != null){
                    try{
                        t.close();
                    }
                    catch(Exception e){
                        LOGGER.error("some problems has occurred...");
                    }
                }
            }
            closeInputReader();
        }
    }
    
    /**
     * Third Attemp: Worst Accuracy: 
     * forEach Cell
     *  1) get the arcs that intersect that cell
     *          cellSum = 0
     *          forEach (arc)
     *                  1) compute intersection with that cell
     *                  2) Compute buffer          
     *                  3) vuln = compute vulnerability with that ROI
     *                  4) cellSum += vuln   
     *  
     *  Issues: The result is not precise, is just an upper bound of the real result because the value inside the intersection beetween two buffer are counted 2 times.
     *  
     * @param dataStore
     * @throws IOException
     * @throws NoSuchAuthorityCodeException
     * @throws FactoryException
     */
    private void aggregateArcsOnGridAndComupteBuffers3() throws IOException, NoSuchAuthorityCodeException, FactoryException {
        
        String path = "C:\\Users\\geosolutions\\Documents\\destination\\targets_raster\\tiled\\RP_BU-PRES_20121217.tif";
        RenderedImage image = VulnerabilityUtils.loadImage(true, new File(path));
        GeoTiffReader gtr = new GeoTiffReader(new File(path));
        
        Map<Double, SimpleFeatureType> featTypeMap = null;
        Map<Double, OutputObject> outMap = null;
        Map<Double, Transaction> transactionMap = null;
        try {
            
            String inputGeometryName = getInputGeometryName(dataStore);
            SimpleFeature gridFeature = null;
            createInputReader(dataStore, new DefaultTransaction(), "siig_geo_grid");
            
            
            List<Double> distances = new ArrayList<Double>();
            distances.add(8d);distances.add(25d);distances.add(250d);distances.add(780d);
            
            featTypeMap = new HashMap<Double, SimpleFeatureType>();
            outMap = new HashMap<Double, OutputObject>();
            transactionMap = new HashMap<Double, Transaction>();
            for(Double el : distances){
                featTypeMap.put(el, buildTableMultilinestring(dataStore, el));
                transactionMap.put(el, new DefaultTransaction());
                outMap.put(el, new OutputObject(dataStore, transactionMap.get(el), "testVunLevel3-" + el, null));
            }
            
            int c = 0;
            Transaction arcoTrans = null;
            DistancesPair allDistancesForComputation =  TargetPropertiesLoader.createPairDistance(distances);
            int errors = 0;
            while ((gridFeature = readInput()) != null) {
                FeatureIterator<SimpleFeature> iterator = null;
                try {
                    Geometry cell = (Geometry) gridFeature.getDefaultGeometry();
                    arcoTrans = new DefaultTransaction();
                    FeatureSource<SimpleFeatureType, SimpleFeature> reader = createInputReader(
                            dataStore, arcoTrans, "siig_geo_ln_arco_1");
                    iterator = reader.getFeatures(
                            filterFactory.intersects(filterFactory.property(inputGeometryName),
                                    filterFactory.literal(cell))).features();
                    
                    Geometry unionCell = null;
                    Map<Double, Geometry> unionBuffers = new HashMap<Double, Geometry>();
                    while(iterator.hasNext()){
                        SimpleFeature sf = (SimpleFeature)iterator.next();
                        Geometry arcGeom = (Geometry)sf.getDefaultGeometry();
                        Geometry intersection = arcGeom.intersection(cell);
                        
                        SimpleFeatureBuilder sfb = new SimpleFeatureBuilder(featTypeMap.get(8d));
                        sfb.add(intersection);
                        SimpleFeature arcSF = sfb.buildFeature(c+"");
                        Map<Double, Geometry> buffers = VulnerabilityUtils.computeBuffers(arcSF, allDistancesForComputation);
                        List<Geometry> geometries = new ArrayList<Geometry>();
                        for(Double key : buffers.keySet()){
                            if(key == null){
                                continue;
                            }
                            Geometry rasterGeom = VulnerabilityUtils.toRasterSpace(buffers.get(key), VulnerabilityUtils.getWorld2Grid(gtr));                            
                            geometries.add(rasterGeom);
                        }
                        
                        VulnerabilityUtils.sumCellsInsideBuffer(geometries, image, null, 0, null);
                        
                    }
//                    if(unionBuffers == null){
//                        continue;
//                    }
                    
                }
                catch(Exception e){
                    LOGGER.error(e.getLocalizedMessage());
                }
                finally {
                    if(arcoTrans != null){
                        arcoTrans.close();
                    }
                    if(iterator != null){
                        iterator.close();
                    }
                }
            }
        }
        finally {
            for(Double el : transactionMap.keySet()){
                Transaction t = transactionMap.get(el);
                if(t != null){
                    try{
                        t.close();
                    }
                    catch(Exception e){
                        LOGGER.error("some problems has occurred...");
                    }
                }
            }
            closeInputReader();
        }
    }
    
    private void mergeBufferMap(Map<Double, Geometry> buffers, Map<Double, Geometry> unionBuffers){
        for(Double el : buffers.keySet()){
           Geometry newGeom = buffers.get(el);
           Geometry sumGeom = unionBuffers.remove(el);
           sumGeom = sumGeom == null ? newGeom : sumGeom.union(newGeom);
           unionBuffers.put(el, sumGeom);
        }
    }
    
    public SimpleFeatureType buildTableMultilinestring(DataStore ds, Double bufferRadius) {
        SimpleFeatureType ft = null;
        try {
            SimpleFeatureTypeBuilder sftb = new SimpleFeatureTypeBuilder();
            sftb.setCRS(CRS.decode("EPSG:32632"));
            sftb.add("geometria", MultiLineString.class);
            sftb.setName("testVunLevel3-" + bufferRadius);
            ft = sftb.buildFeatureType();
            ds.createSchema(ft);
        } catch (Exception e) {
            LOGGER.error("error while creating table for radius" + bufferRadius);
            System.exit(0);
        }
        return ft;
    }
    
    public SimpleFeatureType buildTableMultiPolygon(DataStore ds, Double bufferRadius) {
        SimpleFeatureType ft = null;
        try {
            SimpleFeatureTypeBuilder sftb = new SimpleFeatureTypeBuilder();
            sftb.setCRS(CRS.decode("EPSG:32632"));
            sftb.add("geometria", MultiLineString.class);
            sftb.setName("testVunLevel3-" + bufferRadius);
            ft = sftb.buildFeatureType();
            ds.createSchema(ft);
        } catch (Exception e) {
            LOGGER.error("error while creating table for radius" + bufferRadius);
            System.exit(0);
        }
        return ft;
    }

    public static void main(String[] args) throws IOException, NoSuchAuthorityCodeException, FactoryException {
        Map<String, Serializable> datastoreParams = new HashMap<String, Serializable>();
        datastoreParams.put("port", 5432);
        datastoreParams.put("schema", "siig_p");
        datastoreParams.put("passwd", "siig_p");
        datastoreParams.put("dbtype", "postgis");
        datastoreParams.put("host", "192.168.88.132");
        datastoreParams.put("Expose primary keys", "true");
        datastoreParams.put("user", "siig_p");
        datastoreParams.put("database", "destination_staging");
        JDBCDataStore dataStore = null;        
        MetadataIngestionHandler metadataHandler = null;
        try {
        	
        	dataStore = (JDBCDataStore)DataStoreFinder.getDataStore(datastoreParams);	        
	        metadataHandler = new MetadataIngestionHandler(dataStore);
	        VulnerabilityLevel3Tests vulnTest = new VulnerabilityLevel3Tests("siig_geo_grid", metadataHandler, dataStore);
	        vulnTest.runAnImplementation(datastoreParams);
        } catch(Exception e) {
        	//
        } finally {
        	if(metadataHandler != null) {
        		metadataHandler.dispose();
        	}
        	
        	if(dataStore != null) {
        		dataStore.dispose();
        	}        	
        }
    }
}
